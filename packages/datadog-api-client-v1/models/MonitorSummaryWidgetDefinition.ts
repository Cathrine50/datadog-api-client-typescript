/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MonitorSummaryWidgetDefinitionType } from "./MonitorSummaryWidgetDefinitionType";
import { WidgetColorPreference } from "./WidgetColorPreference";
import { WidgetMonitorSummaryDisplayFormat } from "./WidgetMonitorSummaryDisplayFormat";
import { WidgetMonitorSummarySort } from "./WidgetMonitorSummarySort";
import { WidgetSummaryType } from "./WidgetSummaryType";
import { WidgetTextAlign } from "./WidgetTextAlign";

export class MonitorSummaryWidgetDefinition {
  "colorPreference"?: WidgetColorPreference;
  /**
   * The number of monitors to display.
   */
  "count"?: number;
  "displayFormat"?: WidgetMonitorSummaryDisplayFormat;
  /**
   * Whether to show counts of 0 or not.
   */
  "hideZeroCounts"?: boolean;
  /**
   * Query to filter the monitors with.
   */
  "query": string;
  /**
   * Whether to show the time that has elapsed since the monitor/group triggered.
   */
  "showLastTriggered"?: boolean;
  "sort"?: WidgetMonitorSummarySort;
  /**
   * The start of the list. Typically 0.
   */
  "start"?: number;
  "summaryType"?: WidgetSummaryType;
  /**
   * Title of the widget.
   */
  "title"?: string;
  "titleAlign"?: WidgetTextAlign;
  /**
   * Size of the title.
   */
  "titleSize"?: string;
  "type": MonitorSummaryWidgetDefinitionType;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: {
      name: string;
      baseName: string;
      type: string;
      required: boolean;
      format?: string;
      enumValues?: any;
    };
  } = {
    colorPreference: {
      name: "colorPreference",
      baseName: "color_preference",
      type: "WidgetColorPreference",
      required: false,
      format: "",
    },
    count: {
      name: "count",
      baseName: "count",
      type: "number",
      required: false,
      format: "int64",
    },
    displayFormat: {
      name: "displayFormat",
      baseName: "display_format",
      type: "WidgetMonitorSummaryDisplayFormat",
      required: false,
      format: "",
    },
    hideZeroCounts: {
      name: "hideZeroCounts",
      baseName: "hide_zero_counts",
      type: "boolean",
      required: false,
      format: "",
    },
    query: {
      name: "query",
      baseName: "query",
      type: "string",
      required: true,
      format: "",
    },
    showLastTriggered: {
      name: "showLastTriggered",
      baseName: "show_last_triggered",
      type: "boolean",
      required: false,
      format: "",
    },
    sort: {
      name: "sort",
      baseName: "sort",
      type: "WidgetMonitorSummarySort",
      required: false,
      format: "",
    },
    start: {
      name: "start",
      baseName: "start",
      type: "number",
      required: false,
      format: "int64",
    },
    summaryType: {
      name: "summaryType",
      baseName: "summary_type",
      type: "WidgetSummaryType",
      required: false,
      format: "",
    },
    title: {
      name: "title",
      baseName: "title",
      type: "string",
      required: false,
      format: "",
    },
    titleAlign: {
      name: "titleAlign",
      baseName: "title_align",
      type: "WidgetTextAlign",
      required: false,
      format: "",
    },
    titleSize: {
      name: "titleSize",
      baseName: "title_size",
      type: "string",
      required: false,
      format: "",
    },
    type: {
      name: "type",
      baseName: "type",
      type: "MonitorSummaryWidgetDefinitionType",
      required: true,
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return MonitorSummaryWidgetDefinition.attributeTypeMap;
  }

  public constructor() {}
}
