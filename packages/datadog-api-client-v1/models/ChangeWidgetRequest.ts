/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LogQueryDefinition } from "./LogQueryDefinition";
import { ProcessQueryDefinition } from "./ProcessQueryDefinition";
import { WidgetChangeType } from "./WidgetChangeType";
import { WidgetCompareTo } from "./WidgetCompareTo";
import { WidgetOrderBy } from "./WidgetOrderBy";
import { WidgetSort } from "./WidgetSort";

export class ChangeWidgetRequest {
  "apmQuery"?: LogQueryDefinition;
  "changeType"?: WidgetChangeType;
  "compareTo"?: WidgetCompareTo;
  "eventQuery"?: LogQueryDefinition;
  /**
   * Whether to show increase as good.
   */
  "increaseGood"?: boolean;
  "logQuery"?: LogQueryDefinition;
  "networkQuery"?: LogQueryDefinition;
  "orderBy"?: WidgetOrderBy;
  "orderDir"?: WidgetSort;
  "processQuery"?: ProcessQueryDefinition;
  "profileMetricsQuery"?: LogQueryDefinition;
  /**
   * Query definition.
   */
  "q"?: string;
  "rumQuery"?: LogQueryDefinition;
  "securityQuery"?: LogQueryDefinition;
  /**
   * Whether to show the present value.
   */
  "showPresent"?: boolean;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: {
      name: string;
      baseName: string;
      type: string;
      required: boolean;
      format?: string;
      enumValues?: any;
    };
  } = {
    apmQuery: {
      name: "apmQuery",
      baseName: "apm_query",
      type: "LogQueryDefinition",
      required: false,
      format: "",
    },
    changeType: {
      name: "changeType",
      baseName: "change_type",
      type: "WidgetChangeType",
      required: false,
      format: "",
    },
    compareTo: {
      name: "compareTo",
      baseName: "compare_to",
      type: "WidgetCompareTo",
      required: false,
      format: "",
    },
    eventQuery: {
      name: "eventQuery",
      baseName: "event_query",
      type: "LogQueryDefinition",
      required: false,
      format: "",
    },
    increaseGood: {
      name: "increaseGood",
      baseName: "increase_good",
      type: "boolean",
      required: false,
      format: "",
    },
    logQuery: {
      name: "logQuery",
      baseName: "log_query",
      type: "LogQueryDefinition",
      required: false,
      format: "",
    },
    networkQuery: {
      name: "networkQuery",
      baseName: "network_query",
      type: "LogQueryDefinition",
      required: false,
      format: "",
    },
    orderBy: {
      name: "orderBy",
      baseName: "order_by",
      type: "WidgetOrderBy",
      required: false,
      format: "",
    },
    orderDir: {
      name: "orderDir",
      baseName: "order_dir",
      type: "WidgetSort",
      required: false,
      format: "",
    },
    processQuery: {
      name: "processQuery",
      baseName: "process_query",
      type: "ProcessQueryDefinition",
      required: false,
      format: "",
    },
    profileMetricsQuery: {
      name: "profileMetricsQuery",
      baseName: "profile_metrics_query",
      type: "LogQueryDefinition",
      required: false,
      format: "",
    },
    q: {
      name: "q",
      baseName: "q",
      type: "string",
      required: false,
      format: "",
    },
    rumQuery: {
      name: "rumQuery",
      baseName: "rum_query",
      type: "LogQueryDefinition",
      required: false,
      format: "",
    },
    securityQuery: {
      name: "securityQuery",
      baseName: "security_query",
      type: "LogQueryDefinition",
      required: false,
      format: "",
    },
    showPresent: {
      name: "showPresent",
      baseName: "show_present",
      type: "boolean",
      required: false,
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return ChangeWidgetRequest.attributeTypeMap;
  }

  public constructor() {}
}
