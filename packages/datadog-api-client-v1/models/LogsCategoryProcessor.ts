/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LogsCategoryProcessorCategory } from "./LogsCategoryProcessorCategory";
import { LogsCategoryProcessorType } from "./LogsCategoryProcessorType";

export class LogsCategoryProcessor {
  /**
   * Array of filters to match or not a log and their corresponding `name`to assign a custom value to the log.
   */
  "categories": Array<LogsCategoryProcessorCategory>;
  /**
   * Whether or not the processor is enabled.
   */
  "isEnabled"?: boolean;
  /**
   * Name of the processor.
   */
  "name"?: string;
  /**
   * Name of the target attribute which value is defined by the matching category.
   */
  "target": string;
  "type": LogsCategoryProcessorType;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: {
      name: string;
      baseName: string;
      type: string;
      required: boolean;
      format?: string;
    };
  } = {
    categories: {
      name: "categories",
      baseName: "categories",
      type: "Array<LogsCategoryProcessorCategory>",
      required: true,
    },
    isEnabled: {
      name: "isEnabled",
      baseName: "is_enabled",
      type: "boolean",
      required: false,
    },
    name: {
      name: "name",
      baseName: "name",
      type: "string",
      required: false,
    },
    target: {
      name: "target",
      baseName: "target",
      type: "string",
      required: true,
    },
    type: {
      name: "type",
      baseName: "type",
      type: "LogsCategoryProcessorType",
      required: true,
    },
  };

  static getAttributeTypeMap() {
    return LogsCategoryProcessor.attributeTypeMap;
  }

  public constructor() {}
}
