/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SyntheticsDeviceID } from "./SyntheticsDeviceID";
import { SyntheticsTestOptionsMonitorOptions } from "./SyntheticsTestOptionsMonitorOptions";
import { SyntheticsTestOptionsRetry } from "./SyntheticsTestOptionsRetry";

export class SyntheticsTestOptions {
  /**
   * For SSL test, whether or not the test should allow self signed certificates.
   */
  "acceptSelfSigned"?: boolean;
  /**
   * Allows loading insecure content for an HTTP request.
   */
  "allowInsecure"?: boolean;
  /**
   * For browser test, array with the different device IDs used to run the test.
   */
  "deviceIds"?: Array<SyntheticsDeviceID>;
  /**
   * Whether or not to disable CORS mechanism.
   */
  "disableCors"?: boolean;
  /**
   * For API HTTP test, whether or not the test should follow redirects.
   */
  "followRedirects"?: boolean;
  /**
   * Minimum amount of time in failure required to trigger an alert.
   */
  "minFailureDuration"?: number;
  /**
   * Minimum number of locations in failure required to trigger an alert.
   */
  "minLocationFailed"?: number;
  /**
   * The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
   */
  "monitorName"?: string;
  "monitorOptions"?: SyntheticsTestOptionsMonitorOptions;
  /**
   * Integer from 1 (high) to 5 (low) indicating alert severity.
   */
  "monitorPriority"?: number;
  /**
   * Prevents saving screenshots of the steps.
   */
  "noScreenshot"?: boolean;
  "retry"?: SyntheticsTestOptionsRetry;
  /**
   * The frequency at which to run the Synthetic test (in seconds).
   */
  "tickEvery"?: number;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: {
      name: string;
      baseName: string;
      type: string;
      required: boolean;
      format?: string;
    };
  } = {
    acceptSelfSigned: {
      name: "acceptSelfSigned",
      baseName: "accept_self_signed",
      type: "boolean",
      required: false,
    },
    allowInsecure: {
      name: "allowInsecure",
      baseName: "allow_insecure",
      type: "boolean",
      required: false,
    },
    deviceIds: {
      name: "deviceIds",
      baseName: "device_ids",
      type: "Array<SyntheticsDeviceID>",
      required: false,
    },
    disableCors: {
      name: "disableCors",
      baseName: "disableCors",
      type: "boolean",
      required: false,
    },
    followRedirects: {
      name: "followRedirects",
      baseName: "follow_redirects",
      type: "boolean",
      required: false,
    },
    minFailureDuration: {
      name: "minFailureDuration",
      baseName: "min_failure_duration",
      type: "number",
      required: false,
      format: "int64",
    },
    minLocationFailed: {
      name: "minLocationFailed",
      baseName: "min_location_failed",
      type: "number",
      required: false,
      format: "int64",
    },
    monitorName: {
      name: "monitorName",
      baseName: "monitor_name",
      type: "string",
      required: false,
    },
    monitorOptions: {
      name: "monitorOptions",
      baseName: "monitor_options",
      type: "SyntheticsTestOptionsMonitorOptions",
      required: false,
    },
    monitorPriority: {
      name: "monitorPriority",
      baseName: "monitor_priority",
      type: "number",
      required: false,
      format: "int32",
    },
    noScreenshot: {
      name: "noScreenshot",
      baseName: "noScreenshot",
      type: "boolean",
      required: false,
    },
    retry: {
      name: "retry",
      baseName: "retry",
      type: "SyntheticsTestOptionsRetry",
      required: false,
    },
    tickEvery: {
      name: "tickEvery",
      baseName: "tick_every",
      type: "number",
      required: false,
      format: "int64",
    },
  };

  static getAttributeTypeMap() {
    return SyntheticsTestOptions.attributeTypeMap;
  }

  public constructor() {}
}
