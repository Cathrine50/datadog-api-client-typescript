/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MetricsQueryUnit } from "./MetricsQueryUnit";

export class MetricsQueryMetadata {
  /**
   * Aggregation type.
   */
  "aggr"?: string;
  /**
   * Display name of the metric.
   */
  "displayName"?: string;
  /**
   * End of the time window, milliseconds since Unix epoch.
   */
  "end"?: number;
  /**
   * Metric expression.
   */
  "expression"?: string;
  /**
   * Number of seconds between data samples.
   */
  "interval"?: number;
  /**
   * Number of data samples.
   */
  "length"?: number;
  /**
   * Metric name.
   */
  "metric"?: string;
  /**
   * List of points of the time series.
   */
  "pointlist"?: Array<Array<number>>;
  /**
   * The index of the series' query within the request.
   */
  "queryIndex"?: number;
  /**
   * Metric scope, comma separated list of tags.
   */
  "scope"?: string;
  /**
   * Start of the time window, milliseconds since Unix epoch.
   */
  "start"?: number;
  /**
   * Unique tags identifying this series.
   */
  "tagSet"?: Array<string>;
  /**
   * Detailed information about the metric unit. First element describes the \"primary unit\" (for example, `bytes` in `bytes per second`), second describes the \"per unit\" (for example, `second` in `bytes per second`).
   */
  "unit"?: Array<MetricsQueryUnit>;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: {
      name: string;
      baseName: string;
      type: string;
      required: boolean;
      format?: string;
      enumValues?: any;
    };
  } = {
    aggr: {
      name: "aggr",
      baseName: "aggr",
      type: "string",
      required: false,
      format: "",
    },
    displayName: {
      name: "displayName",
      baseName: "display_name",
      type: "string",
      required: false,
      format: "",
    },
    end: {
      name: "end",
      baseName: "end",
      type: "number",
      required: false,
      format: "int64",
    },
    expression: {
      name: "expression",
      baseName: "expression",
      type: "string",
      required: false,
      format: "",
    },
    interval: {
      name: "interval",
      baseName: "interval",
      type: "number",
      required: false,
      format: "int64",
    },
    length: {
      name: "length",
      baseName: "length",
      type: "number",
      required: false,
      format: "int64",
    },
    metric: {
      name: "metric",
      baseName: "metric",
      type: "string",
      required: false,
      format: "",
    },
    pointlist: {
      name: "pointlist",
      baseName: "pointlist",
      type: "Array<Array<number>>",
      required: false,
      format: "double",
    },
    queryIndex: {
      name: "queryIndex",
      baseName: "query_index",
      type: "number",
      required: false,
      format: "int64",
    },
    scope: {
      name: "scope",
      baseName: "scope",
      type: "string",
      required: false,
      format: "",
    },
    start: {
      name: "start",
      baseName: "start",
      type: "number",
      required: false,
      format: "int64",
    },
    tagSet: {
      name: "tagSet",
      baseName: "tag_set",
      type: "Array<string>",
      required: false,
      format: "",
    },
    unit: {
      name: "unit",
      baseName: "unit",
      type: "Array<MetricsQueryUnit>",
      required: false,
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return MetricsQueryMetadata.attributeTypeMap;
  }

  public constructor() {}
}
