/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { DashboardLayoutType } from "./DashboardLayoutType";
import { DashboardReflowType } from "./DashboardReflowType";
import { DashboardTemplateVariable } from "./DashboardTemplateVariable";
import { DashboardTemplateVariablePreset } from "./DashboardTemplateVariablePreset";
import { Widget } from "./Widget";

export class Dashboard {
  /**
   * Identifier of the dashboard author.
   */
  "authorHandle"?: string;
  /**
   * Creation date of the dashboard.
   */
  "createdAt"?: Date;
  /**
   * Description of the dashboard.
   */
  "description"?: string;
  /**
   * ID of the dashboard.
   */
  "id"?: string;
  /**
   * Whether this dashboard is read-only. If True, only the author and admins can make changes to it. Prefer using `restricted_roles` to manage write authorization.
   */
  "isReadOnly"?: boolean;
  "layoutType": DashboardLayoutType;
  /**
   * Modification date of the dashboard.
   */
  "modifiedAt"?: Date;
  /**
   * List of handles of users to notify when changes are made to this dashboard.
   */
  "notifyList"?: Array<string>;
  "reflowType"?: DashboardReflowType;
  /**
   * A list of role identifiers. Only the author and users associated with at least one of these roles can edit this dashboard.
   */
  "restrictedRoles"?: Array<string>;
  /**
   * Array of template variables saved views.
   */
  "templateVariablePresets"?: Array<DashboardTemplateVariablePreset>;
  /**
   * List of template variables for this dashboard.
   */
  "templateVariables"?: Array<DashboardTemplateVariable>;
  /**
   * Title of the dashboard.
   */
  "title": string;
  /**
   * The URL of the dashboard.
   */
  "url"?: string;
  /**
   * List of widgets to display on the dashboard.
   */
  "widgets": Array<Widget>;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: {
      name: string;
      baseName: string;
      type: string;
      required: boolean;
      format?: string;
      enumValues?: any;
    };
  } = {
    authorHandle: {
      name: "authorHandle",
      baseName: "author_handle",
      type: "string",
      required: false,
      format: "",
    },
    createdAt: {
      name: "createdAt",
      baseName: "created_at",
      type: "Date",
      required: false,
      format: "date-time",
    },
    description: {
      name: "description",
      baseName: "description",
      type: "string",
      required: false,
      format: "",
    },
    id: {
      name: "id",
      baseName: "id",
      type: "string",
      required: false,
      format: "",
    },
    isReadOnly: {
      name: "isReadOnly",
      baseName: "is_read_only",
      type: "boolean",
      required: false,
      format: "",
    },
    layoutType: {
      name: "layoutType",
      baseName: "layout_type",
      type: "DashboardLayoutType",
      required: true,
      format: "",
    },
    modifiedAt: {
      name: "modifiedAt",
      baseName: "modified_at",
      type: "Date",
      required: false,
      format: "date-time",
    },
    notifyList: {
      name: "notifyList",
      baseName: "notify_list",
      type: "Array<string>",
      required: false,
      format: "",
    },
    reflowType: {
      name: "reflowType",
      baseName: "reflow_type",
      type: "DashboardReflowType",
      required: false,
      format: "",
    },
    restrictedRoles: {
      name: "restrictedRoles",
      baseName: "restricted_roles",
      type: "Array<string>",
      required: false,
      format: "",
    },
    templateVariablePresets: {
      name: "templateVariablePresets",
      baseName: "template_variable_presets",
      type: "Array<DashboardTemplateVariablePreset>",
      required: false,
      format: "",
    },
    templateVariables: {
      name: "templateVariables",
      baseName: "template_variables",
      type: "Array<DashboardTemplateVariable>",
      required: false,
      format: "",
    },
    title: {
      name: "title",
      baseName: "title",
      type: "string",
      required: true,
      format: "",
    },
    url: {
      name: "url",
      baseName: "url",
      type: "string",
      required: false,
      format: "",
    },
    widgets: {
      name: "widgets",
      baseName: "widgets",
      type: "Array<Widget>",
      required: true,
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return Dashboard.attributeTypeMap;
  }

  public constructor() {}
}
