/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { IncidentFieldAttributes } from "./IncidentFieldAttributes";
import { IncidentNotificationHandle } from "./IncidentNotificationHandle";

export class IncidentResponseAttributes {
  /**
   * Timestamp when the incident was created.
   */
  "created"?: Date;
  /**
   * Length of the incident's customer impact in seconds. Equals the difference between `customer_impact_start` and `customer_impact_end`.
   */
  "customerImpactDuration"?: number;
  /**
   * Timestamp when customers were no longer impacted by the incident.
   */
  "customerImpactEnd"?: Date;
  /**
   * A summary of the impact customers experienced during the incident.
   */
  "customerImpactScope"?: string;
  /**
   * Timestamp when customers began being impacted by the incident.
   */
  "customerImpactStart"?: Date;
  /**
   * A flag indicating whether the incident caused customer impact.
   */
  "customerImpacted"?: boolean;
  /**
   * Timestamp when the incident was detected.
   */
  "detected"?: Date;
  /**
   * A condensed view of the user-defined fields attached to incidents.
   */
  "fields"?: { [key: string]: IncidentFieldAttributes };
  /**
   * Timestamp when the incident was last modified.
   */
  "modified"?: Date;
  /**
   * Notification handles that will be notified of the incident during update.
   */
  "notificationHandles"?: Array<IncidentNotificationHandle>;
  /**
   * The UUID of the postmortem object attached to the incident.
   */
  "postmortemId"?: string;
  /**
   * The monotonically increasing integer ID for the incident.
   */
  "publicId"?: number;
  /**
   * Timestamp when the incident's state was set to resolved.
   */
  "resolved"?: Date;
  /**
   * The amount of time in seconds to detect the incident. Equals the difference between `customer_impact_start` and `detected`.
   */
  "timeToDetect"?: number;
  /**
   * The amount of time in seconds to call incident after detection. Equals the difference of `detected` and `created`.
   */
  "timeToInternalResponse"?: number;
  /**
   * The amount of time in seconds to resolve customer impact after detecting the issue. Equals the difference between `customer_impact_end` and `detected`.
   */
  "timeToRepair"?: number;
  /**
   * The amount of time in seconds to resolve the incident after it was created. Equals the difference between `created` and `resolved`.
   */
  "timeToResolve"?: number;
  /**
   * The title of the incident, which summarizes what happened.
   */
  "title": string;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: {
      name: string;
      baseName: string;
      type: string;
      required: boolean;
      format?: string;
      enumValues?: any;
    };
  } = {
    created: {
      name: "created",
      baseName: "created",
      type: "Date",
      required: false,
      format: "date-time",
    },
    customerImpactDuration: {
      name: "customerImpactDuration",
      baseName: "customer_impact_duration",
      type: "number",
      required: false,
      format: "int64",
    },
    customerImpactEnd: {
      name: "customerImpactEnd",
      baseName: "customer_impact_end",
      type: "Date",
      required: false,
      format: "date-time",
    },
    customerImpactScope: {
      name: "customerImpactScope",
      baseName: "customer_impact_scope",
      type: "string",
      required: false,
      format: "",
    },
    customerImpactStart: {
      name: "customerImpactStart",
      baseName: "customer_impact_start",
      type: "Date",
      required: false,
      format: "date-time",
    },
    customerImpacted: {
      name: "customerImpacted",
      baseName: "customer_impacted",
      type: "boolean",
      required: false,
      format: "",
    },
    detected: {
      name: "detected",
      baseName: "detected",
      type: "Date",
      required: false,
      format: "date-time",
    },
    fields: {
      name: "fields",
      baseName: "fields",
      type: "{ [key: string]: IncidentFieldAttributes; }",
      required: false,
      format: "",
    },
    modified: {
      name: "modified",
      baseName: "modified",
      type: "Date",
      required: false,
      format: "date-time",
    },
    notificationHandles: {
      name: "notificationHandles",
      baseName: "notification_handles",
      type: "Array<IncidentNotificationHandle>",
      required: false,
      format: "",
    },
    postmortemId: {
      name: "postmortemId",
      baseName: "postmortem_id",
      type: "string",
      required: false,
      format: "",
    },
    publicId: {
      name: "publicId",
      baseName: "public_id",
      type: "number",
      required: false,
      format: "int64",
    },
    resolved: {
      name: "resolved",
      baseName: "resolved",
      type: "Date",
      required: false,
      format: "date-time",
    },
    timeToDetect: {
      name: "timeToDetect",
      baseName: "time_to_detect",
      type: "number",
      required: false,
      format: "int64",
    },
    timeToInternalResponse: {
      name: "timeToInternalResponse",
      baseName: "time_to_internal_response",
      type: "number",
      required: false,
      format: "int64",
    },
    timeToRepair: {
      name: "timeToRepair",
      baseName: "time_to_repair",
      type: "number",
      required: false,
      format: "int64",
    },
    timeToResolve: {
      name: "timeToResolve",
      baseName: "time_to_resolve",
      type: "number",
      required: false,
      format: "int64",
    },
    title: {
      name: "title",
      baseName: "title",
      type: "string",
      required: true,
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return IncidentResponseAttributes.attributeTypeMap;
  }

  public constructor() {}
}
