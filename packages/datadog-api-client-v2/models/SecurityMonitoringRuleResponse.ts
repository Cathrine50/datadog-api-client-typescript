/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SecurityMonitoringFilter } from "./SecurityMonitoringFilter";
import { SecurityMonitoringRuleCase } from "./SecurityMonitoringRuleCase";
import { SecurityMonitoringRuleOptions } from "./SecurityMonitoringRuleOptions";
import { SecurityMonitoringRuleQuery } from "./SecurityMonitoringRuleQuery";
import { SecurityMonitoringRuleTypeRead } from "./SecurityMonitoringRuleTypeRead";

export class SecurityMonitoringRuleResponse {
  /**
   * Cases for generating signals.
   */
  "cases"?: Array<SecurityMonitoringRuleCase>;
  /**
   * When the rule was created, timestamp in milliseconds.
   */
  "createdAt"?: number;
  /**
   * User ID of the user who created the rule.
   */
  "creationAuthorId"?: number;
  /**
   * Additional queries to filter matched events before they are processed.
   */
  "filters"?: Array<SecurityMonitoringFilter>;
  /**
   * Whether the notifications include the triggering group-by values in their title.
   */
  "hasExtendedTitle"?: boolean;
  /**
   * The ID of the rule.
   */
  "id"?: string;
  /**
   * Whether the rule is included by default.
   */
  "isDefault"?: boolean;
  /**
   * Whether the rule has been deleted.
   */
  "isDeleted"?: boolean;
  /**
   * Whether the rule is enabled.
   */
  "isEnabled"?: boolean;
  /**
   * Message for generated signals.
   */
  "message"?: string;
  /**
   * The name of the rule.
   */
  "name"?: string;
  "options"?: SecurityMonitoringRuleOptions;
  /**
   * Queries for selecting logs which are part of the rule.
   */
  "queries"?: Array<SecurityMonitoringRuleQuery>;
  /**
   * Tags for generated signals.
   */
  "tags"?: Array<string>;
  "type"?: SecurityMonitoringRuleTypeRead;
  /**
   * User ID of the user who updated the rule.
   */
  "updateAuthorId"?: number;
  /**
   * The version of the rule.
   */
  "version"?: number;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: {
      name: string;
      baseName: string;
      type: string;
      required: boolean;
      format?: string;
    };
  } = {
    cases: {
      name: "cases",
      baseName: "cases",
      type: "Array<SecurityMonitoringRuleCase>",
      required: false,
    },
    createdAt: {
      name: "createdAt",
      baseName: "createdAt",
      type: "number",
      required: false,
      format: "int64",
    },
    creationAuthorId: {
      name: "creationAuthorId",
      baseName: "creationAuthorId",
      type: "number",
      required: false,
      format: "int64",
    },
    filters: {
      name: "filters",
      baseName: "filters",
      type: "Array<SecurityMonitoringFilter>",
      required: false,
    },
    hasExtendedTitle: {
      name: "hasExtendedTitle",
      baseName: "hasExtendedTitle",
      type: "boolean",
      required: false,
    },
    id: {
      name: "id",
      baseName: "id",
      type: "string",
      required: false,
    },
    isDefault: {
      name: "isDefault",
      baseName: "isDefault",
      type: "boolean",
      required: false,
    },
    isDeleted: {
      name: "isDeleted",
      baseName: "isDeleted",
      type: "boolean",
      required: false,
    },
    isEnabled: {
      name: "isEnabled",
      baseName: "isEnabled",
      type: "boolean",
      required: false,
    },
    message: {
      name: "message",
      baseName: "message",
      type: "string",
      required: false,
    },
    name: {
      name: "name",
      baseName: "name",
      type: "string",
      required: false,
    },
    options: {
      name: "options",
      baseName: "options",
      type: "SecurityMonitoringRuleOptions",
      required: false,
    },
    queries: {
      name: "queries",
      baseName: "queries",
      type: "Array<SecurityMonitoringRuleQuery>",
      required: false,
    },
    tags: {
      name: "tags",
      baseName: "tags",
      type: "Array<string>",
      required: false,
    },
    type: {
      name: "type",
      baseName: "type",
      type: "SecurityMonitoringRuleTypeRead",
      required: false,
    },
    updateAuthorId: {
      name: "updateAuthorId",
      baseName: "updateAuthorId",
      type: "number",
      required: false,
      format: "int64",
    },
    version: {
      name: "version",
      baseName: "version",
      type: "number",
      required: false,
      format: "int64",
    },
  };

  static getAttributeTypeMap() {
    return SecurityMonitoringRuleResponse.attributeTypeMap;
  }

  public constructor() {}
}
